#!/usr/bin/env ruby

require 'set'

module Enumerable
  def take_uniq n
    raise ArgumentError, 'attempt to take negative size' if n < 0
    return [] if n == 0

    each.with_object(Set.new) do |elem, elems|
      elems << elem
      break elems if elems.size == n
    end
  end
end

def num_branches_to_get
  argument = ARGV.first
  return 5 unless argument

  match = ARGV.first.match(/^-?(\d+)$/)
  raise ArgumentError, "invalid count: `#{argument}'" unless match
  match.captures[0].to_i
end

reflog = IO.popen('git reflog')
branch_list = IO.popen(%q(git for-each-ref --format='%(refname:short)' refs/heads/))

all_branches = branch_list.readlines.map(&:strip).to_set

recent_branches = reflog.readlines.lazy.flat_map do |line|
  match = line.match(/moving from (\S+) to (\S+)/)
  branches = match && match.captures || []
  branches.select { |branch| all_branches.include? branch }
end.take_uniq num_branches_to_get

puts recent_branches.to_a
